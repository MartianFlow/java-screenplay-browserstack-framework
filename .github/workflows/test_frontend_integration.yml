name: Continuous testing frontend

on:
  workflow_call:
    inputs:
      debug:
        description: 'Flag to enable detailed logs in pipeline'
        required: false
        default: false
        type: boolean
#      use-aws-credentials:
#        description: 'Flag to use AWS credentials, if this flag is true set the AWS_ROLE_ENV secret'
#        required: false
#        default: false
#        type: boolean
      command-execute:
        description: 'Command to execute the automation project'
        required: true
        type: string
      command-pre-execute:
        description: 'Command to aditional settings pre-execution of test'
        required: false
        default: ""
        type: string
      command-post-execute:
        description: 'Command to aditional settings post-execution of test'
        required: false
        default: ""
        type: string
      command-install:
        description: 'Command to install dependencies of automation project'
        required: false
        type: string
      environment:
        description: "Environment of Github Actions"
        required: false
        default: ""
        type: string
#      other-env-variables:
#        description: 'Additionals Environments variables separated by spaces'
#        required: false
#        type: string
      files-to-export:
        description: 'Relative path of files to export and download as artifact'
        required: true
        type: string
#      aws-region:
#        description: "The AWS region"
#        default: us-east-1
#        required: false
#        type: string
      repository:
        description: "Name of repo in Github"
        required: true
        type: string
#      node-version:
#        description: "Version of Node"
#        required: false
#        default: 14.x
#        type: string
      java-version:
        description: "Version of Java"
        required: false
        default: "11"
        type: string
#      dependencies-file-cache:
#        description: "Route of dependencies for cache management"
#        required: false
#        type: string
#      folder-libraries-cache:
#        description: "Folder libraries of dependencies for cache management"
#        required: false
#        type: string
#      use-docker-compose:
#        description: 'It indicates if the project use docker-compose instead docker'
#        required: false
#        default: false
#        type: boolean
#      docker-compose-path:
#        description: "Route of docker compose file"
#        required: false
#        type: string
      prefix-team:
        description: 'Prefix of agile team'
        required: true
        type: string
      name-file-report:
        description: 'name of CSV or HTML file with results of execution'
        required: true
        type: string
      target-url-zap:
        description: 'URL of frontend to scan in OWASP ZAP'
        required: false
        default: ""
        type: string
#      path-app:
#        description: 'Path of APK/IPA to upload in Browserstack/MobSF'
#        required: false
#        default: ""
#        type: string
#      release-id-steward:
#        description: 'ID of Release Log in STEWARD'
#        required: false
#        default: ''
#        type: string
      path-report-file:
        description: 'Path of file .json or .xml with results'
        required: true
        type: string
#      test-plan-key:
#        description: 'Test plan key in project in JIRA'
#        required: true
#        type: string
#      test-exec-key:
#        description: 'Test execution key in project in JIRA'
#        required: true
#        type: string
    secrets:
      DIG_READER_GITHUB_ACCESS_TOKEN:
        required: true
      BROWSERSTACK_KEY:
        required: false
      BROWSERSTACK_USER:
        required: false
#      AWS_ROLE_ENV:
#        required: false
#      OTHERS:
#        required: false
#      ARTIFACTORY_READER_USER:
#        required: false
#      ARTIFACTORY_READER_API_KEY:
#        required: false
      CLIENT_ID_XRAY:
        required: true
      CLIENT_SECRET_XRAY:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
#  check-standard:
#    runs-on: ubuntu-latest
#    if: ${{ endsWith(github.repository, '-testing') }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: Checkout Check Files Workflows
#        uses: actions/checkout@v3
#        with:
#          repository: bancodebogota/bdb-dig-do-action-check-files-workflows
#          ref: 'v4'
#          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
#          persist-credentials: false
#          path: ./.github/actions/bdb-dig-do-action-check-files-workflows
#      - name: Check Files Workflows
#        uses: ./.github/actions/bdb-dig-do-action-check-files-workflows
#        with:
#          technology: frontend
#          team: ${{ inputs.prefix-team }}
#          environment: st

  integration-e2e-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.repository }}
    environment: ${{ inputs.environment }}
    outputs:
      id: ${{ steps.execution.outputs.id }}
    steps:
      - name: Checkout automation project
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./${{ inputs.repository }}
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ inputs.node-version }}
#          check-latest: false
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          architecture: x64
          distribution: "adopt"
#      - name: Configure AWS credentials
#        if: inputs.use-aws-credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE_ENV }}
#          aws-region: ${{ inputs.aws-region }}
#      - name: Set cache dependencies
#        if: ${{ inputs.folder-libraries-cache && inputs.dependencies-file-cache }}
#        id: cache-dependencies
#        uses: actions/cache@v3
#        with:
#          path: ${{ inputs.folder-libraries-cache }}
#          key: ${{ runner.os }}-cache-${{ hashFiles(inputs.dependencies-file-cache) }}
#      - name: Set-up Docker compose
#        id: docker-compose-up
#        if: inputs.use-docker-compose && inputs.docker-compose-path
#        run: |
#          cd ${{ inputs.docker-compose-path }}
#          docker-compose up -d
#      - name: Install dependencies
#        if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' && inputs.command-install }}
#        env:
#          COMMAND_INSTALL: ${{ inputs.command-install }}
#          ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
#          ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
#        run: |
#          eval "$COMMAND_INSTALL" || exit 1
      - name: Run E2E testing
        id: execution
        if: ${{ always() }}
        env:
          COMMAND_EXECUTE: ${{ inputs.command-execute }}
          COMMAND_PRE_EXECUTE: ${{ inputs.command-pre-execute }}
          DEBUG: ${{ inputs.debug }}
#          OTHER_ENVS: ${{ inputs.other-env-variables }}
#          OTHER_SECRETS: ${{ secrets.OTHERS }}
#          USE_DOCKER_COMPOSE: ${{ inputs.use-docker-compose }}
#          ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
#          ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
        run: |
          if [ "$DEBUG" == "true" ]; then
            echo "IP: $(curl -s 'https://api.ipify.org?format=json' | jq '.ip' -r)"
            echo "DATE: $(date +%d/%m/%Y) $(date +%H:%M:%S)"
            echo "PWD: $(pwd)"
            echo "LS: $(ls)"
            echo "EXPORT: $(export)"
          fi

          echo "Exporting secrets of Github..."
          SECRETS=$(echo $OTHER_SECRETS | tr " " "\n")
          for secret in $SECRETS; do
              secret_config=(${secret//=/ })
              secret_name=${secret_config[0]}
              secret_value=${secret_config[1]}
              printf -v "$secret_name" "$secret_value"
              value="${!secret_name}"
              export $secret_name=$secret_value
              [[ "$DEBUG" == "true" ]] && echo "Exported - $secret_name: ***${value: -4}"
          done

          echo "Exporting environment variables..."
          ENVS=$(echo $OTHER_ENVS | tr " " "\n")
          for env in $ENVS; do
              env_config=(${env//=/ })
              env_name=${env_config[0]}
              env_value=${env_config[1]}
              printf -v "$env_name" "$env_value"
              value="${!env_name}"
              export $env_name=$env_value
              [[ "$DEBUG" == "true" ]] && echo "Exported - $env_name: ***${value: -4}"
          done

          echo "Starting settings and execution of test..."
          echo "id=$(uuidgen)" >> "$GITHUB_OUTPUT"
          eval "$COMMAND_PRE_EXECUTE" || exit 1
          eval "$COMMAND_EXECUTE" || exit 1
#      - name: Post execute command
#        if: ${{ always() }}
#        env:
#          COMMAND_POST_EXECUTE: ${{ inputs.command-post-execute }}
#        run: |
#          eval "$COMMAND_POST_EXECUTE" || exit 1
      - name: Prepare files to export
        if: ${{ always() }}
        env:
          FILES: ${{ inputs.files-to-export }}
        run: |
          files=$(echo $FILES | tr " " "\n")
          mkdir temp_dir_files
          for file in $files; do
            cp -r $file temp_dir_files
          done
      - name: Upload reports of E2E tests
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: report-e2e-${{ steps.execution.outputs.id }}
          retention-days: 1
          path: ${{ inputs.repository }}/temp_dir_files/**
      - name: Checkout bancodebogota/bbog-dig-do-action-xray-test-report-pipeline
        if: ${{ always() }}
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bbog-dig-do-action-xray-test-report-pipeline
          ref: 'v1.2.0'
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bbog-dig-do-action-xray-test-report-pipeline
      - name: Xray reports
        if: ${{ always() }}
        uses: ./.github/actions/bbog-dig-do-action-xray-test-report-pipeline
        with:
          client-id: ${{ secrets.CLIENT_ID_XRAY }}
          client-secret: ${{ secrets.CLIENT_SECRET_XRAY }}
          path-report-file: ${{ inputs.repository }}/${{ inputs.path-report-file }}
          test-plan-key: ${{ inputs.test-plan-key }}
          test-exec-key: ${{ inputs.test-exec-key }}
#      - name: Post Set-up Dockers
#        if: inputs.use-docker-compose && inputs.docker-compose-path && steps.docker-compose-up.outcome == 'success'
#        run: |
#          cd ${{ inputs.docker-compose-path }}
#          docker-compose down
  security-analysis:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
#      - name: Checkout automation project
#        if: ${{ inputs.path-app }}
#        uses: actions/checkout@v3
#        with:
#          repository: bancodebogota/${{ inputs.repository }}
#          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
#          persist-credentials: false
#          path: ./${{ inputs.repository }}
#      - name: Validate info app
#        if: ${{ inputs.path-app }}
#        id: info-app
#        env:
#          PATH_APP: ${{ inputs.path-app }}
#          REPO_NAME: ${{ github.event.repository.name }}
#        run: |
#          echo "EXTENTION=${PATH_APP##*.}" >> "$GITHUB_OUTPUT"
#          set -e
#          sudo mkdir -p /home/runner/work/_temp/_github_home
#          sudo chown -R 9901:9901 /home/runner/work/_temp/_github_home
#          sudo mkdir -p /home/runner/work/$REPO_NAME/$REPO_NAME
#          sudo chown -R 9901:9901 /home/runner/work/$REPO_NAME/$REPO_NAME
#      - name: MobSF active scan
#        if: ${{ inputs.path-app }}
#        uses: fundacaocerti/mobsf-action@v1.7.1
#        env:
#          INPUT_FILE_NAME: ${{ inputs.repository }}/${{ inputs.path-app }}
#          SCAN_TYPE: ${{ steps.info-app.outputs.EXTENTION }}
#          OUTPUT_FILE_NAME: report_json
#      - name: Cleanup MobSF Permissions
#        if: ${{ always() && inputs.path-app }}
#        run: |
#          set -e
#          sudo chown -R runner:docker /home/runner/work/_temp/_github_home
#          sudo chown -R runner:docker /home/runner/work/$REPO_NAME/$REPO_NAME
#        env:
#          REPO_NAME: ${{ github.event.repository.name }}
#      - name: Upload report MobSF
#        if: ${{ inputs.path-app }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: security_reports
#          retention-days: 1
#          path: report_json.json
      - name: ZAP baseline scan
        if: ${{ inputs.target-url-zap }}
        uses: zaproxy/action-baseline@v0.9.0
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ inputs.target-url-zap }}
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          allow_issue_writing: false
          artifact_name: security_reports
      - name: Restore security report
        if: ${{ always() }}
        uses: actions/download-artifact@v3
        with:
          name: security_reports
          path: ${{ inputs.repository }}/security-reports
#      - name: Checkout bancodebogota/bbog-dig-do-action-evaluate-zap-report-pipeline
#        if: ${{ always() }}
#        uses: actions/checkout@v3
#        with:
#          repository: bancodebogota/bbog-dig-do-action-evaluate-zap-report-pipeline
#          ref: 'v2'
#          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
#          persist-credentials: false
#          path: ./.github/actions/bbog-dig-do-action-evaluate-zap-report-pipeline
#      - name: Evaluate Security reports
#        if: ${{ always() }}
#        uses: ./.github/actions/bbog-dig-do-action-evaluate-zap-report-pipeline
#        with:
#          folder-reports: ${{ inputs.repository }}/security-reports

#  report-testing:
#    runs-on: ubuntu-latest
#    needs: [integration-e2e-test, security-analysis]
#    if: ${{ always() && ((github.ref_name == 'main' && github.event_name == 'workflow_dispatch' && endsWith(github.repository, '-testing')) || (github.base_ref == 'master' && !endsWith(github.repository, '-testing') && github.event_name == 'pull_request')) }}
#    environment: ${{ inputs.environment }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: arn:aws:iam::753233380545:role/oidc-assume-role-gh-regression-report
#          aws-region: ${{ inputs.aws-region }}
#      - name: Set variables
#        id: variables
#        run: |
#          echo "PREFIX_TEAM_UPPER=$(echo $PREFIX_TEAM | tr [:lower:] [:upper:])" >> "$GITHUB_OUTPUT"
#          echo "DATE=$(date +%F)T$(date +%T)" >> "$GITHUB_OUTPUT"
#        env:
#          PREFIX_TEAM: ${{ inputs.prefix-team }}
#      - name: Restore report regression
#        uses: actions/download-artifact@v3
#        with:
#          name: report-e2e-${{ needs.integration-e2e-test.outputs.id }}
#      - name: Upload report regression
#        run: |
#          NAME_FILE=${NAME_FILE_REPORT##*/}
#          PATH_BUCKET=$(echo "s3://lifecycle-environment-bbog-report-testing/input/$PREFIX_TEAM/regression-reports/$DATE-$RELEASE_ID-$NAME_FILE" | tr -d '[[:space:]]')
#          aws s3 cp $NAME_FILE_REPORT $PATH_BUCKET
#        env:
#          NAME_FILE_REPORT: ${{ inputs.name-file-report }}
#          PREFIX_TEAM: ${{ steps.variables.outputs.PREFIX_TEAM_UPPER }}
#          DATE: ${{ steps.variables.outputs.DATE }}
#          RELEASE_ID: ${{ inputs.release-id-steward }}
#      - name: Restore report security
#        uses: actions/download-artifact@v3
#        with:
#          name: security_reports
#      - name: Upload report security
#        run: |
#          NAME_FILE=${NAME_FILE_REPORT##*/}
#          PATH_BUCKET=$(echo "s3://lifecycle-environment-bbog-report-testing/input/$PREFIX_TEAM/security-reports/$DATE-$RELEASE_ID-$NAME_FILE" | tr -d '[[:space:]]')
#          aws s3 cp $NAME_FILE_REPORT $PATH_BUCKET
#        env:
#          NAME_FILE_REPORT: report_json.json
#          PREFIX_TEAM: ${{ steps.variables.outputs.PREFIX_TEAM_UPPER }}
#          DATE: ${{ steps.variables.outputs.DATE }}
#          RELEASE_ID: ${{ inputs.release-id-steward }}